#!/bin/bash
# ================================================================
# GIDEON AI ASSISTANT - PRODUCTION INSTALLATION SCRIPT
# Installation automatique r√©solvant tous les probl√®mes critiques
# ================================================================

set -e  # Exit on any error

# =====================================
# CONFIGURATION ET D√âTECTION
# =====================================

# Colors pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Variables globales
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_NAME="venv_gideon_production"
PYTHON_MIN_VERSION="3.8"
LOG_FILE="$SCRIPT_DIR/install_production.log"

# D√©tecter OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        if command -v lsb_release >/dev/null 2>&1; then
            DISTRO=$(lsb_release -si)
        elif [ -f /etc/os-release ]; then
            DISTRO=$(grep "^ID=" /etc/os-release | cut -d'=' -f2 | tr -d '"')
        else
            DISTRO="unknown"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        DISTRO="macos"
    elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
        OS="windows"
        DISTRO="windows"
    else
        echo -e "${RED}‚ùå OS non support√©: $OSTYPE${NC}"
        exit 1
    fi
}

# =====================================
# FONCTIONS UTILITAIRES
# =====================================

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    echo -e "$1"
}

print_header() {
    echo -e "\n${BOLD}${BLUE}================================================${NC}"
    echo -e "${BOLD}${BLUE} $1${NC}"
    echo -e "${BOLD}${BLUE}================================================${NC}\n"
}

print_step() {
    echo -e "${CYAN}‚û§ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier commande
check_command() {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# V√©rifier version Python
check_python_version() {
    local python_cmd="$1"
    if ! check_command "$python_cmd"; then
        return 1
    fi
    
    local version=$($python_cmd -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    local required="$PYTHON_MIN_VERSION"
    
    if [ "$(printf '%s\n' "$required" "$version" | sort -V | head -n1)" = "$required" ]; then
        echo "$version"
        return 0
    else
        return 1
    fi
}

# =====================================
# INSTALLATION PAR OS
# =====================================

install_linux() {
    print_header "üêß INSTALLATION LINUX ($DISTRO)"
    
    # Mise √† jour des packages
    print_step "Mise √† jour des packages syst√®me..."
    if [[ "$DISTRO" == "ubuntu" ]] || [[ "$DISTRO" == "debian" ]]; then
        sudo apt update || { print_error "√âchec mise √† jour apt"; exit 1; }
        
        # Packages essentiels
        print_step "Installation des d√©pendances syst√®me..."
        sudo apt install -y \
            python3-dev \
            python3-pip \
            python3-venv \
            build-essential \
            cmake \
            pkg-config \
            git \
            curl \
            wget || { print_error "√âchec installation packages de base"; exit 1; }
        
        # Audio (r√©sout Probl√®me #2 - pyaudio)
        print_step "Installation des d√©pendances audio..."
        sudo apt install -y \
            libasound2-dev \
            portaudio19-dev \
            pulseaudio \
            alsa-utils \
            libportaudio2 \
            libsndfile1-dev || print_warning "Certains packages audio ont √©chou√©"
        
        # Qt6 pour interface (r√©sout Probl√®me #6)
        print_step "Installation Qt6..."
        sudo apt install -y \
            qt6-base-dev \
            qt6-multimedia-dev \
            python3-pyqt6 || print_warning "Qt6 syst√®me non disponible, utilisera pip"
        
        # OpenCV d√©pendances
        print_step "Installation d√©pendances OpenCV..."
        sudo apt install -y \
            libopencv-dev \
            python3-opencv \
            libgtk-3-dev \
            libcanberra-gtk-module \
            libcanberra-gtk3-module || print_warning "Certains packages OpenCV ont √©chou√©"
        
        # Text-to-speech
        print_step "Installation TTS..."
        sudo apt install -y \
            espeak \
            espeak-data \
            libespeak1 \
            libespeak-dev || print_warning "TTS system non install√©"
        
    elif [[ "$DISTRO" == "fedora" ]] || [[ "$DISTRO" == "rhel" ]] || [[ "$DISTRO" == "centos" ]]; then
        # RedHat/Fedora
        sudo dnf update -y || sudo yum update -y
        sudo dnf install -y python3-devel python3-pip python3-venv gcc gcc-c++ cmake git || \
        sudo yum install -y python3-devel python3-pip python3-venv gcc gcc-c++ cmake git
        
    elif [[ "$DISTRO" == "arch" ]]; then
        # Arch Linux
        sudo pacman -Syu --noconfirm
        sudo pacman -S --noconfirm python python-pip base-devel cmake git qt6-base qt6-multimedia
    fi
    
    # Groupes utilisateur pour audio (r√©sout Probl√®me #5)
    print_step "Configuration groupes utilisateur..."
    sudo usermod -a -G audio "$USER" 2>/dev/null || print_warning "Groupe audio non ajout√©"
    sudo usermod -a -G video "$USER" 2>/dev/null || print_warning "Groupe video non ajout√©"
    
    # Fix Wayland system tray (r√©sout Probl√®me #6)
    if [ -n "$WAYLAND_DISPLAY" ]; then
        print_step "Configuration Wayland pour system tray..."
        echo 'export QT_QPA_PLATFORM=xcb' >> ~/.bashrc
        echo 'export QT_QPA_PLATFORM=xcb' >> ~/.profile
        export QT_QPA_PLATFORM=xcb
        print_success "Wayland configur√© pour utiliser X11 (system tray)"
    fi
    
    print_success "Installation Linux termin√©e"
}

install_macos() {
    print_header "üçé INSTALLATION MACOS"
    
    # V√©rifier/installer Homebrew
    if ! check_command brew; then
        print_step "Installation Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Ajouter au PATH
        if [[ -d "/opt/homebrew" ]]; then
            echo 'export PATH="/opt/homebrew/bin:$PATH"' >> ~/.zshrc
            export PATH="/opt/homebrew/bin:$PATH"
        fi
    fi
    
    # Mise √† jour Homebrew
    print_step "Mise √† jour Homebrew..."
    brew update
    
    # D√©pendances syst√®me
    print_step "Installation d√©pendances syst√®me..."
    brew install \
        python@3.9 \
        cmake \
        portaudio \
        qt6 \
        pkg-config \
        opencv \
        git || { print_error "√âchec installation packages Homebrew"; exit 1; }
    
    # Configuration PATH
    print_step "Configuration PATH..."
    {
        echo 'export PATH="/opt/homebrew/opt/python@3.9/bin:$PATH"'
        echo 'export PATH="/opt/homebrew/opt/qt@6/bin:$PATH"'
        echo 'export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"'
    } >> ~/.zshrc
    
    # Appliquer imm√©diatement
    export PATH="/opt/homebrew/opt/python@3.9/bin:$PATH"
    export PATH="/opt/homebrew/opt/qt@6/bin:$PATH"
    export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
    
    # Permissions macOS (r√©sout Probl√®me #5)
    print_step "Configuration permissions macOS..."
    print_warning "IMPORTANT: Vous devrez autoriser manuellement:"
    print_warning "  1. System Preferences > Security & Privacy > Microphone"
    print_warning "  2. System Preferences > Security & Privacy > Camera"
    print_warning "  3. Ajouter Terminal et Python aux applications autoris√©es"
    
    print_success "Installation macOS termin√©e"
}

install_windows() {
    print_header "ü™ü INSTALLATION WINDOWS"
    
    # V√©rifier gestionnaire de packages
    if check_command winget; then
        print_step "Installation via winget..."
        winget install --id Git.Git -e --silent
        winget install --id Python.Python.3.9 -e --silent
        winget install --id Microsoft.VisualStudio.2022.BuildTools -e --silent
        
    elif check_command choco; then
        print_step "Installation via Chocolatey..."
        choco install -y git python visualstudio2022buildtools
        
    else
        print_error "Aucun gestionnaire de packages trouv√©!"
        print_warning "Installation manuelle requise:"
        print_warning "  1. Git: https://git-scm.com/download/win"
        print_warning "  2. Python 3.9+: https://python.org"
        print_warning "  3. Visual Studio Build Tools: https://visualstudio.microsoft.com/visual-cpp-build-tools/"
        read -p "Appuyez sur Entr√©e une fois l'installation manuelle termin√©e..."
    fi
    
    # Visual C++ Build Tools (r√©sout Probl√®me #3 - face_recognition)
    print_step "V√©rification Visual C++ Build Tools..."
    if [ -d "/c/Program Files (x86)/Microsoft Visual Studio" ] || [ -d "/c/Program Files/Microsoft Visual Studio" ]; then
        print_success "Visual Studio Build Tools d√©tect√©"
    else
        print_warning "Visual Studio Build Tools requis pour certaines d√©pendances"
        print_warning "T√©l√©charger: https://visualstudio.microsoft.com/visual-cpp-build-tools/"
    fi
    
    print_success "Installation Windows termin√©e"
}

# =====================================
# INSTALLATION PYTHON ET D√âPENDANCES
# =====================================

setup_python_environment() {
    print_header "üêç CONFIGURATION ENVIRONNEMENT PYTHON"
    
    # D√©tecter Python
    local python_cmd=""
    for cmd in python3.9 python3 python; do
        if version=$(check_python_version "$cmd"); then
            python_cmd="$cmd"
            print_success "Python $version d√©tect√©: $cmd"
            break
        fi
    done
    
    if [ -z "$python_cmd" ]; then
        print_error "Python $PYTHON_MIN_VERSION+ requis mais non trouv√©"
        exit 1
    fi
    
    # Cr√©er environnement virtuel
    print_step "Cr√©ation environnement virtuel..."
    if [ -d "$VENV_NAME" ]; then
        print_warning "Environnement virtuel existant trouv√©, suppression..."
        rm -rf "$VENV_NAME"
    fi
    
    "$python_cmd" -m venv "$VENV_NAME" || { print_error "√âchec cr√©ation venv"; exit 1; }
    
    # Activer environnement
    print_step "Activation environnement virtuel..."
    if [[ "$OS" == "windows" ]]; then
        source "$VENV_NAME/Scripts/activate"
    else
        source "$VENV_NAME/bin/activate"
    fi
    
    # Mise √† jour pip
    print_step "Mise √† jour pip..."
    python -m pip install --upgrade pip setuptools wheel || { print_error "√âchec mise √† jour pip"; exit 1; }
    
    print_success "Environnement Python configur√©"
}

install_python_dependencies() {
    print_header "üì¶ INSTALLATION D√âPENDANCES PYTHON"
    
    # V√©rifier fichier requirements
    if [ ! -f "requirements_production.txt" ]; then
        print_error "Fichier requirements_production.txt non trouv√©!"
        exit 1
    fi
    
    # Installation s√©quentielle pour √©viter conflits (r√©sout Probl√®me #4)
    print_step "Installation d√©pendances critiques..."
    
    # Numpy en premier (base pour tout)
    python -m pip install "numpy>=1.21.0,<1.26.0" || { print_error "√âchec installation numpy"; exit 1; }
    
    # PyQt6 avec gestion d'erreurs
    print_step "Installation PyQt6..."
    python -m pip install "PyQt6>=6.4.0,<6.7.0" || {
        print_warning "PyQt6 pip a √©chou√©, essai version syst√®me..."
        if [[ "$OS" == "linux" ]]; then
            print_warning "Utilisation PyQt6 syst√®me (apt install python3-pyqt6)"
        fi
    }
    
    # OpenAI nouvelle API (r√©sout Probl√®me #1)
    print_step "Installation OpenAI (nouvelle API)..."
    python -m pip install "openai>=1.0.0,<2.0.0" || { print_error "√âchec installation OpenAI"; exit 1; }
    
    # Audio stack stable (r√©sout Probl√®me #2 - pyaudio)
    print_step "Installation stack audio stable..."
    python -m pip install "sounddevice>=0.4.6,<0.5.0" "soundfile>=0.12.1,<0.13.0" "scipy>=1.9.0,<1.12.0" || {
        print_warning "Certains packages audio ont √©chou√©"
    }
    
    # Computer vision
    print_step "Installation computer vision..."
    python -m pip install "opencv-python>=4.7.0,<4.9.0" || print_warning "OpenCV installation √©chou√©e"
    
    # Face detection lightweight (r√©sout Probl√®me #3 - face_recognition)
    print_step "Installation d√©tection faciale (MTCNN)..."
    python -m pip install "mtcnn>=0.1.1,<1.0.0" "tensorflow-cpu>=2.10.0,<2.14.0" "Pillow>=9.0.0,<11.0.0" || {
        print_warning "Face detection non install√©e (optionnel)"
    }
    
    # Autres d√©pendances
    print_step "Installation autres d√©pendances..."
    python -m pip install -r requirements_production.txt || {
        print_warning "Certaines d√©pendances optionnelles ont √©chou√©"
    }
    
    print_success "D√©pendances Python install√©es"
}

# =====================================
# CONFIGURATION ET TESTS
# =====================================

configure_system() {
    print_header "‚öôÔ∏è CONFIGURATION SYST√àME"
    
    # Cr√©er fichier d'environnement
    print_step "Cr√©ation fichier .env..."
    cat > .env << EOF
# Configuration Gideon AI Assistant Production
OPENAI_API_KEY=your-api-key-here
PYTHONPATH=.
QT_QPA_PLATFORM=xcb
EOF
    
    # VS Code configuration (r√©sout Probl√®me #4)
    print_step "Configuration VS Code..."
    mkdir -p .vscode
    if [ ! -f ".vscode/settings.json" ]; then
        print_warning ".vscode/settings.json non trouv√© - utilisez la version fournie"
    fi
    
    # Permissions ex√©cution
    print_step "Configuration permissions..."
    chmod +x test_system_production.py 2>/dev/null || true
    chmod +x gideon_main_production.py 2>/dev/null || true
    
    print_success "Configuration syst√®me termin√©e"
}

run_validation_tests() {
    print_header "üß™ TESTS DE VALIDATION"
    
    print_step "Ex√©cution tests syst√®me..."
    if [ -f "test_system_production.py" ]; then
        python test_system_production.py || {
            print_warning "Tests syst√®me ont r√©v√©l√© des probl√®mes"
            print_warning "Consultez la sortie ci-dessus pour plus de d√©tails"
        }
    else
        print_warning "Script de test non trouv√©"
    fi
}

# =====================================
# FONCTION PRINCIPALE
# =====================================

main() {
    # Initialisation
    log "D√©marrage installation Gideon AI Assistant Production"
    detect_os
    
    print_header "ü§ñ GIDEON AI ASSISTANT - INSTALLATION PRODUCTION"
    echo -e "${PURPLE}R√©solution compl√®te des 10 probl√®mes critiques${NC}"
    echo -e "${PURPLE}OS d√©tect√©: $OS ($DISTRO)${NC}"
    echo -e "${PURPLE}R√©pertoire: $SCRIPT_DIR${NC}"
    echo -e "${PURPLE}Log: $LOG_FILE${NC}\n"
    
    # V√©rifications pr√©liminaires
    if [ "$EUID" -eq 0 ]; then
        print_error "Ne pas ex√©cuter en tant que root (sauf pour macOS/Linux packages syst√®me)"
        print_warning "Relancez sans sudo pour l'installation Python"
    fi
    
    # Installation par OS
    case $OS in
        "linux")
            install_linux
            ;;
        "macos")
            install_macos
            ;;
        "windows")
            install_windows
            ;;
    esac
    
    # Configuration Python
    setup_python_environment
    install_python_dependencies
    
    # Configuration finale
    configure_system
    
    # Tests de validation
    run_validation_tests
    
    # R√©sum√© final
    print_header "üéâ INSTALLATION TERMIN√âE"
    print_success "Gideon AI Assistant Production install√© avec succ√®s!"
    
    echo -e "\n${CYAN}PROCHAINES √âTAPES:${NC}"
    echo -e "${CYAN}1. Configurer cl√© OpenAI:${NC}"
    echo -e "   export OPENAI_API_KEY='votre-cl√©-api'"
    echo -e "${CYAN}2. Ajouter photo de visage:${NC}"
    echo -e "   cp votre_photo.jpg ton_visage.jpg"
    
    if [[ "$OS" == "macos" ]]; then
        echo -e "${CYAN}3. Autoriser permissions macOS:${NC}"
        echo -e "   System Preferences > Security & Privacy > Microphone/Camera"
    fi
    
    echo -e "${CYAN}4. Tester l'installation:${NC}"
    if [[ "$OS" == "windows" ]]; then
        echo -e "   $VENV_NAME\\Scripts\\activate"
    else
        echo -e "   source $VENV_NAME/bin/activate"
    fi
    echo -e "   python test_system_production.py"
    
    echo -e "${CYAN}5. Lancer Gideon:${NC}"
    echo -e "   python gideon_main_production.py"
    
    print_success "Installation Production Complete! üöÄ"
}

# =====================================
# EX√âCUTION
# =====================================

# Gestion d'erreurs
trap 'print_error "Installation interrompue"; exit 1' INT TERM

# Ex√©cution principale
main "$@" 