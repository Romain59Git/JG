#!/usr/bin/env python3
"""
Gideon AI Assistant - Production System Validator
Tests complets pour validation syst√®me avec Ollama local

Fonctionnalit√©s test√©es:
- ‚úÖ Environnement Python et d√©pendances
- ‚úÖ Configuration Ollama local (100% offline)
- ‚úÖ Syst√®me audio et reconnaissance vocale
- ‚úÖ Interface graphique PyQt6
- ‚úÖ Monitoring hardware
- ‚úÖ Permissions syst√®me
- ‚úÖ Structure du projet
"""

import sys
import os
import platform
import importlib
import subprocess
import time
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from pathlib import Path

# Ajout du chemin du projet
sys.path.insert(0, str(Path(__file__).parent))

@dataclass
class TestResult:
    """R√©sultat d'un test individuel"""
    name: str
    passed: bool
    message: str
    critical: bool = True
    details: Dict = None

class Colors:
    """Codes couleur ANSI pour terminal"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class SystemValidatorProduction:
    """Validateur syst√®me production pour Gideon AI Assistant"""
    
    def __init__(self):
        self.results: List[TestResult] = []
        self.system_info = self._get_system_info()
        self.start_time = time.time()
        
    def _get_system_info(self) -> Dict[str, str]:
        """Obtenir informations syst√®me"""
        return {
            'os': platform.system(),
            'os_version': platform.release(),
            'architecture': platform.machine(),
            'python_version': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            'python_executable': sys.executable,
            'working_directory': os.getcwd(),
            'script_location': str(Path(__file__).parent.absolute())
        }
    
    def print_header(self, title: str):
        """Afficher en-t√™te format√©"""
        print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*70}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.BLUE}{title.center(70)}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.BLUE}{'='*70}{Colors.END}\n")
    
    def log_result(self, name: str, passed: bool, message: str = "", critical: bool = True, details: Dict = None) -> TestResult:
        """Enregistrer et afficher r√©sultat de test"""
        result = TestResult(name, passed, message, critical, details)
        self.results.append(result)
        
        # Ic√¥ne et couleur
        icon = "‚úÖ" if passed else ("‚ùå" if critical else "‚ö†Ô∏è")
        color = Colors.GREEN if passed else (Colors.RED if critical else Colors.YELLOW)
        severity = "CRITICAL" if critical and not passed else ("OPTIONAL" if not critical else "")
        
        # Affichage format√©
        print(f"{color}{icon} {name:<35} {severity:<10} {message}{Colors.END}")
        
        if details and not passed:
            for key, value in details.items():
                print(f"    {Colors.CYAN}{key}: {value}{Colors.END}")
        
        return result
    
    def test_python_environment(self) -> bool:
        """Test environnement Python"""
        self.print_header("üêç ENVIRONNEMENT PYTHON")
        
        # Version Python
        version = sys.version_info
        required_version = (3, 8)
        python_ok = version >= required_version
        
        self.log_result(
            "Version Python",
            python_ok,
            f"{version.major}.{version.minor}.{version.micro}" + (" ‚úÖ" if python_ok else f" (requis: {required_version[0]}.{required_version[1]}+)"),
            critical=True
        )
        
        # Installation pip
        try:
            import pip
            pip_version = pip.__version__
            self.log_result("Package pip", True, f"v{pip_version}", critical=True)
        except ImportError:
            self.log_result("Package pip", False, "pip non disponible", critical=True)
        
        # Environnement virtuel
        in_venv = hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)
        self.log_result(
            "Environnement virtuel",
            in_venv,
            "Activ√©" if in_venv else "Non d√©tect√© (recommand√©)",
            critical=False
        )
        
        return python_ok
    
    def test_system_info(self) -> bool:
        """Test informations syst√®me"""
        self.print_header("üíª INFORMATIONS SYST√àME")
        
        print(f"{Colors.CYAN}OS: {self.system_info['os']} {self.system_info['os_version']}{Colors.END}")
        print(f"{Colors.CYAN}Architecture: {self.system_info['architecture']}{Colors.END}")
        print(f"{Colors.CYAN}Python: {self.system_info['python_version']}{Colors.END}")
        print(f"{Colors.CYAN}Ex√©cutable Python: {self.system_info['python_executable']}{Colors.END}")
        print(f"{Colors.CYAN}R√©pertoire de travail: {self.system_info['working_directory']}{Colors.END}")
        
        # V√©rification OS support√©
        supported_os = ['Windows', 'Linux', 'Darwin']
        os_supported = self.system_info['os'] in supported_os
        
        self.log_result(
            "OS Support√©",
            os_supported,
            self.system_info['os'] if os_supported else f"{self.system_info['os']} (non test√©)",
            critical=False
        )
        
        return True
    
    def test_critical_dependencies(self) -> bool:
        """Test d√©pendances critiques"""
        self.print_header("üì¶ D√âPENDANCES CRITIQUES")
        
        # Mapping nom package -> description
        package_descriptions = {
            'psutil': "Monitoring syst√®me",
            'requests': "Requ√™tes HTTP pour Ollama",
            'numpy': "Calculs num√©riques",
            'PyQt6': "Interface graphique",
            'sounddevice': "Audio input/output",
            'pyttsx3': "Text-to-speech",
            'SpeechRecognition': "Speech recognition",
            'opencv-python': "Computer vision",
            'mtcnn': "Face detection",
            'tensorflow-cpu': "Machine learning",
            'Pillow': "Image processing",
            'scipy': "Signal processing",
            'sentence-transformers': "Local embeddings",
            'chromadb': "Vector database"
        }
        
        all_critical_ok = True
        
        for dep_name, dep_desc in package_descriptions.items():
            try:
                module = importlib.import_module(dep_name)
                version = getattr(module, '__version__', 'unknown')
                self.log_result(dep_desc, True, f"v{version}", critical=True)
            except ImportError as e:
                self.log_result(dep_desc, False, f"Non install√©: {str(e)[:50]}", critical=True)
                all_critical_ok = False
        
        return all_critical_ok
    
    def test_optional_dependencies(self) -> bool:
        """Test d√©pendances optionnelles"""
        self.print_header("üîß D√âPENDANCES OPTIONNELLES")
        
        optional_deps = {
            'sounddevice': "Audio input/output",
            'cv2': "Computer vision",
            'mtcnn': "Face detection",
            'tensorflow': "Machine learning",
            'pyttsx3': "Text-to-speech",
            'speech_recognition': "Speech recognition",
            'scipy': "Signal processing",
            'Pillow': "Image processing"
        }
        
        optional_count = 0
        
        for dep_name, dep_desc in optional_deps.items():
            try:
                if dep_name == 'cv2':
                    import cv2
                    module = cv2
                else:
                    module = importlib.import_module(dep_name)
                
                version = getattr(module, '__version__', 'unknown')
                self.log_result(dep_desc, True, f"v{version}", critical=False)
                optional_count += 1
            except ImportError:
                self.log_result(dep_desc, False, "Non install√©", critical=False)
        
        # Score optionnel
        total_optional = len(optional_deps)
        score_percent = (optional_count / total_optional) * 100
        
        print(f"\n{Colors.CYAN}Score d√©pendances optionnelles: {optional_count}/{total_optional} ({score_percent:.1f}%){Colors.END}")
        
        return True
    
    def test_performance_system(self) -> bool:
        """Test performance syst√®me"""
        self.print_header("‚ö° PERFORMANCE SYST√àME")
        
        try:
            import psutil
            
            # M√©moire
            memory = psutil.virtual_memory()
            total_gb = memory.total / (1024**3)
            available_gb = memory.available / (1024**3)
            memory_ok = available_gb >= 1.0  # Minimum 1GB libre
            
            self.log_result(
                "M√©moire disponible",
                memory_ok,
                f"{available_gb:.1f}GB / {total_gb:.1f}GB total",
                critical=False,
                details={"Minimum recommand√©": "1.0GB"} if not memory_ok else None
            )
            
            # CPU
            cpu_count = psutil.cpu_count()
            cpu_usage = psutil.cpu_percent(interval=1)
            cpu_ok = cpu_usage < 90  # Pas trop charg√©
            
            self.log_result(
                "CPU",
                cpu_ok,
                f"{cpu_count} c≈ìurs, {cpu_usage:.1f}% usage",
                critical=False
            )
            
            # Disque
            if platform.system() == 'Windows':
                disk_usage = psutil.disk_usage('C:')
            else:
                disk_usage = psutil.disk_usage('/')
            
            free_gb = disk_usage.free / (1024**3)
            disk_ok = free_gb >= 1.0  # Minimum 1GB libre
            
            self.log_result(
                "Espace disque",
                disk_ok,
                f"{free_gb:.1f}GB libre",
                critical=False
            )
            
            return memory_ok and disk_ok
            
        except ImportError:
            self.log_result("Performance syst√®me", False, "psutil non disponible", critical=False)
            return False
    
    def test_permissions(self) -> bool:
        """Test permissions syst√®me"""
        self.print_header("üîê PERMISSIONS SYST√àME")
        
        permissions_ok = True
        
        # Test √©criture fichier
        try:
            test_file = Path("gideon_test_write.tmp")
            test_file.write_text("test")
            test_file.unlink()
            self.log_result("√âcriture fichiers", True, "OK", critical=True)
        except Exception as e:
            self.log_result("√âcriture fichiers", False, str(e)[:50], critical=True)
            permissions_ok = False
        
        # Test microphone (basique)
        try:
            import sounddevice as sd
            devices = sd.query_devices()
            input_devices = [d for d in devices if d['max_input_channels'] > 0]
            mic_ok = len(input_devices) > 0
            
            self.log_result(
                "P√©riph√©riques audio",
                mic_ok,
                f"{len(input_devices)} p√©riph√©rique(s) d'entr√©e",
                critical=False
            )
            
            # Test rapide microphone
            if mic_ok:
                try:
                    # Test tr√®s court pour √©viter les demandes de permission
                    data = sd.rec(frames=1024, samplerate=44100, channels=1, blocking=True)
                    self.log_result("Acc√®s microphone", True, "Test r√©ussi", critical=False)
                except Exception as e:
                    details = {}
                    if platform.system() == 'Darwin':
                        details["Solution macOS"] = "System Preferences > Security & Privacy > Microphone"
                    
                    self.log_result(
                        "Acc√®s microphone",
                        False,
                        str(e)[:50],
                        critical=False,
                        details=details
                    )
        except ImportError:
            self.log_result("Test audio", False, "sounddevice non install√©", critical=False)
        
        # Test cam√©ra (basique)
        try:
            import cv2
            cap = cv2.VideoCapture(0)
            camera_ok = cap.isOpened()
            if camera_ok:
                cap.release()
            
            details = {}
            if not camera_ok and platform.system() == 'Darwin':
                details["Solution macOS"] = "System Preferences > Security & Privacy > Camera"
            
            self.log_result(
                "Acc√®s cam√©ra",
                camera_ok,
                "Cam√©ra accessible" if camera_ok else "Acc√®s refus√©",
                critical=False,
                details=details if not camera_ok else None
            )
        except ImportError:
            self.log_result("Test cam√©ra", False, "OpenCV non install√©", critical=False)
        
        return permissions_ok
    
    def test_ollama_configuration(self) -> bool:
        """Test configuration Ollama local"""
        self.print_header("ü§ñ CONFIGURATION OLLAMA LOCAL")
        
        # Test connexion Ollama
        try:
            import requests
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            
            if response.status_code == 200:
                models = response.json().get("models", [])
                model_names = [m["name"] for m in models]
                
                self.log_result("Connexion Ollama", True, 
                              f"{len(models)} mod√®les disponibles", critical=False)
                
                # V√©rifier mod√®les recommand√©s
                recommended = ["mistral:7b", "llama3:8b", "phi3:mini"]
                available_recommended = [m for m in recommended if m in model_names]
                
                if available_recommended:
                    self.log_result("Mod√®les recommand√©s", True,
                                  f"{len(available_recommended)}/{len(recommended)} disponibles", 
                                  critical=False)
                else:
                    self.log_result("Mod√®les recommand√©s", False,
                                  "Aucun mod√®le recommand√© install√©", critical=True)
                    self.recommendations.append("Installer mod√®les: ollama pull mistral:7b")
                
                # Test g√©n√©ration simple
                try:
                    test_data = {
                        "model": model_names[0] if model_names else "mistral:7b",
                        "prompt": "Say hello briefly",
                        "stream": False
                    }
                    
                    test_response = requests.post("http://localhost:11434/api/generate", 
                                                json=test_data, timeout=10)
                    
                    if test_response.status_code == 200:
                        result = test_response.json()
                        if "response" in result and result["response"].strip():
                            self.log_result("Test g√©n√©ration", True, 
                                          "Ollama r√©pond correctement", critical=False)
                            return True
                        else:
                            self.log_result("Test g√©n√©ration", False,
                                          "R√©ponse vide d'Ollama", critical=True)
                    else:
                        self.log_result("Test g√©n√©ration", False,
                                      f"Erreur HTTP {test_response.status_code}", critical=True)
                
                except Exception as e:
                    self.log_result("Test g√©n√©ration", False, str(e), critical=True)
                    
            else:
                self.log_result("Connexion Ollama", False,
                              f"HTTP {response.status_code}", critical=True)
                self.recommendations.append("D√©marrer Ollama: ollama serve")
                return False
                
        except requests.exceptions.ConnectionError:
            self.log_result("Connexion Ollama", False, 
                          "Ollama non d√©marr√©", critical=True)
            self.recommendations.append("D√©marrer Ollama: ollama serve")
            return False
            
        except ImportError:
            self.log_result("Module requests", False, 
                          "requests non install√©", critical=True)
            return False
            
        except Exception as e:
            self.log_result("Configuration Ollama", False, str(e), critical=True)
            return False
            
        return True
    
    def test_ui_capabilities(self) -> bool:
        """Test capacit√©s interface utilisateur"""
        self.print_header("üñ•Ô∏è INTERFACE UTILISATEUR")
        
        # Test PyQt6
        try:
            from PyQt6.QtWidgets import QApplication
            from PyQt6.QtCore import QCoreApplication
            
            # Test cr√©ation app (sans affichage)
            if not QCoreApplication.instance():
                app = QApplication([])
                self.log_result("PyQt6 Application", True, "Cr√©ation r√©ussie", critical=False)
                app.quit()
            else:
                self.log_result("PyQt6 Application", True, "Instance existante", critical=False)
            
            # Test system tray
            try:
                from PyQt6.QtWidgets import QSystemTrayIcon
                tray_available = QSystemTrayIcon.isSystemTrayAvailable()
                
                details = {}
                if not tray_available and platform.system() == 'Linux':
                    details["Solution Linux"] = "export QT_QPA_PLATFORM=xcb (si Wayland)"
                
                self.log_result(
                    "System Tray",
                    tray_available,
                    "Disponible" if tray_available else "Non disponible",
                    critical=False,
                    details=details if not tray_available else None
                )
            except ImportError:
                self.log_result("System Tray", False, "PyQt6 widgets non disponibles", critical=False)
            
            return True
            
        except ImportError as e:
            self.log_result("PyQt6", False, str(e)[:50], critical=False)
            return False
    
    def test_project_structure(self) -> bool:
        """Test structure du projet"""
        self.print_header("üìÅ STRUCTURE PROJET")
        
        required_files = [
            ('config.py', 'Configuration principale'),
            ('core/__init__.py', 'Module core'),
            ('ui/__init__.py', 'Module UI'),
            ('modules/__init__.py', 'Modules fonctionnels'),
            ('requirements_production.txt', 'D√©pendances production')
        ]
        
        optional_files = [
            ('gideon_main_production.py', 'Application principale'),
            ('README.md', 'Documentation'),
            ('.vscode/settings.json', 'Configuration VS Code'),
            ('test_system_production.py', 'Tests syst√®me')
        ]
        
        structure_ok = True
        
        # Fichiers requis
        for file_path, description in required_files:
            file_exists = Path(file_path).exists()
            self.log_result(description, file_exists, file_path, critical=True)
            if not file_exists:
                structure_ok = False
        
        # Fichiers optionnels
        for file_path, description in optional_files:
            file_exists = Path(file_path).exists()
            self.log_result(description, file_exists, file_path, critical=False)
        
        return structure_ok
    
    def test_import_core_modules(self) -> bool:
        """Test import des modules core"""
        self.print_header("üîÑ MODULES CORE")
        
        core_modules = [
            ('core.event_system', 'Syst√®me d\'√©v√©nements'),
            ('core.logger', 'Syst√®me de logging'),
            ('core.assistant_core_production', 'Core assistant production')
        ]
        
        modules_ok = True
        
        for module_name, description in core_modules:
            try:
                importlib.import_module(module_name)
                self.log_result(description, True, f"Import {module_name} OK", critical=True)
            except ImportError as e:
                self.log_result(description, False, str(e)[:50], critical=True)
                modules_ok = False
        
        return modules_ok
    
    def run_comprehensive_test(self) -> Dict[str, any]:
        """Ex√©cuter suite compl√®te de tests"""
        print(f"\n{Colors.BOLD}{Colors.PURPLE}ü§ñ GIDEON AI ASSISTANT - VALIDATION SYST√àME PRODUCTION{Colors.END}")
        print(f"{Colors.PURPLE}D√©marrage validation compl√®te...{Colors.END}")
        print(f"{Colors.PURPLE}Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}{Colors.END}")
        
        # Ex√©cuter tous les tests
        test_results = {
            'python_env': self.test_python_environment(),
            'system_info': self.test_system_info(),
            'critical_deps': self.test_critical_dependencies(),
            'optional_deps': self.test_optional_dependencies(),
            'performance': self.test_performance_system(),
            'permissions': self.test_permissions(),
            'ollama_config': self.test_ollama_configuration(),
            'ui_capabilities': self.test_ui_capabilities(),
            'project_structure': self.test_project_structure(),
            'core_modules': self.test_import_core_modules()
        }
        
        return test_results
    
    def generate_recommendations(self) -> List[str]:
        """G√©n√©rer recommandations bas√©es sur les r√©sultats"""
        recommendations = []
        
        for result in self.results:
            if not result.passed:
                if 'OpenAI' in result.name and 'Non configur√©e' in result.message:
                    recommendations.append("Configurer cl√© API OpenAI: export OPENAI_API_KEY='votre-cl√©'")
                
                elif 'sounddevice' in result.message:
                    recommendations.append("Installer audio: pip install sounddevice soundfile")
                
                elif 'mtcnn' in result.message or 'tensorflow' in result.message:
                    recommendations.append("Installer face detection: pip install mtcnn tensorflow-cpu")
                
                elif 'PyQt6' in result.message:
                    recommendations.append("Installer interface: pip install PyQt6")
                
                elif 'microphone' in result.name.lower() and platform.system() == 'Darwin':
                    recommendations.append("Autoriser microphone macOS: System Preferences > Security & Privacy")
                
                elif 'System Tray' in result.name and platform.system() == 'Linux':
                    recommendations.append("Fix system tray Linux: export QT_QPA_PLATFORM=xcb")
                
                elif 'M√©moire' in result.name:
                    recommendations.append("Lib√©rer m√©moire RAM (minimum 1GB recommand√©)")
        
        # Recommandations g√©n√©rales
        if not any('venv' in result.message for result in self.results if result.name == "Environnement virtuel"):
            recommendations.append("Cr√©er environnement virtuel: python -m venv venv")
        
        # D√©dupliquer
        return list(set(recommendations))
    
    def print_final_summary(self, test_results: Dict[str, bool]):
        """Afficher r√©sum√© final"""
        self.print_header("üìä R√âSUM√â FINAL")
        
        # Statistiques
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results if r.passed)
        critical_tests = [r for r in self.results if r.critical]
        critical_passed = sum(1 for r in critical_tests if r.passed)
        
        # Score global
        score_percent = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        critical_score = (critical_passed / len(critical_tests)) * 100 if critical_tests else 100
        
        print(f"{Colors.BOLD}Tests totaux: {passed_tests}/{total_tests} ({score_percent:.1f}%){Colors.END}")
        print(f"{Colors.BOLD}Tests critiques: {critical_passed}/{len(critical_tests)} ({critical_score:.1f}%){Colors.END}")
        
        # Temps d'ex√©cution
        execution_time = time.time() - self.start_time
        print(f"{Colors.BOLD}Temps d'ex√©cution: {execution_time:.1f}s{Colors.END}")
        
        # Statut final
        if critical_score >= 80 and score_percent >= 70:
            print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ SYST√àME PR√äT POUR GIDEON PRODUCTION !{Colors.END}")
            print(f"{Colors.GREEN}Vous pouvez lancer: python gideon_main_production.py{Colors.END}")
        elif critical_score >= 60:
            print(f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è SYST√àME PARTIELLEMENT PR√äT{Colors.END}")
            print(f"{Colors.YELLOW}Mode d√©grad√© possible. R√©soudre les probl√®mes critiques.{Colors.END}")
        else:
            print(f"\n{Colors.RED}{Colors.BOLD}‚ùå SYST√àME NON PR√äT{Colors.END}")
            print(f"{Colors.RED}Trop de probl√®mes critiques. Installation requise.{Colors.END}")
        
        # Recommandations
        recommendations = self.generate_recommendations()
        if recommendations:
            print(f"\n{Colors.CYAN}{Colors.BOLD}üí° RECOMMANDATIONS:{Colors.END}")
            for i, rec in enumerate(recommendations[:5], 1):  # Top 5
                print(f"{Colors.CYAN}  {i}. {rec}{Colors.END}")
        
        # Next steps
        print(f"\n{Colors.BLUE}{Colors.BOLD}üöÄ PROCHAINES √âTAPES:{Colors.END}")
        print(f"{Colors.BLUE}  1. R√©soudre les probl√®mes critiques identifi√©s{Colors.END}")
        print(f"{Colors.BLUE}  2. Installer d√©pendances manquantes{Colors.END}")
        print(f"{Colors.BLUE}  3. Configurer permissions syst√®me{Colors.END}")
        print(f"{Colors.BLUE}  4. Relancer ce test: python test_system_production.py{Colors.END}")
        print(f"{Colors.BLUE}  5. D√©marrer Gideon: python gideon_main_production.py{Colors.END}")
        
        return score_percent

def main():
    """Point d'entr√©e principal"""
    validator = SystemValidatorProduction()
    
    try:
        # Ex√©cuter validation compl√®te
        test_results = validator.run_comprehensive_test()
        
        # Afficher r√©sum√©
        final_score = validator.print_final_summary(test_results)
        
        # Code de sortie bas√© sur le score
        if final_score >= 70:
            return 0  # Succ√®s
        elif final_score >= 50:
            return 1  # Avertissement
        else:
            return 2  # √âchec critique
            
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}Validation interrompue par l'utilisateur{Colors.END}")
        return 130
    except Exception as e:
        print(f"\n{Colors.RED}Erreur durant la validation: {e}{Colors.END}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 