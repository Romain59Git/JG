#!/usr/bin/env python3
"""
Test script pour v√©rifier que main.py fonctionne
"""

import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

def test_imports():
    """Test des imports principaux"""
    print("üß™ Test des imports...")
    
    try:
        from main import SimpleJarvisApp
        print("‚úÖ Import SimpleJarvisApp: OK")
    except Exception as e:
        print(f"‚ùå Import SimpleJarvisApp: {e}")
        return False
    
    try:
        from core.logger import GideonLogger
        print("‚úÖ Import GideonLogger: OK")
    except Exception as e:
        print(f"‚ùå Import GideonLogger: {e}")
        return False
    
    try:
        from core.memory_monitor import MemoryMonitor
        print("‚úÖ Import MemoryMonitor: OK")
    except Exception as e:
        print(f"‚ùå Import MemoryMonitor: {e}")
        return False
    
    try:
        from core.audio_manager_optimized import AudioManager
        print("‚úÖ Import AudioManager: OK")
    except Exception as e:
        print(f"‚ùå Import AudioManager: {e}")
        return False
    
    try:
        from core.assistant_core_production import AssistantCore
        print("‚úÖ Import AssistantCore: OK")
    except Exception as e:
        print(f"‚ùå Import AssistantCore: {e}")
        return False
    
    return True

def test_jarvis_initialization():
    """Test d'initialisation de Jarvis"""
    print("\nüß™ Test d'initialisation...")
    
    try:
        from main import SimpleJarvisApp
        app = SimpleJarvisApp()
        print("‚úÖ Cr√©ation SimpleJarvisApp: OK")
        
        # Test initialisation des syst√®mes core
        result = app.initialize_core_systems()
        if result:
            print("‚úÖ Initialisation syst√®mes core: OK")
        else:
            print("‚ö†Ô∏è Initialisation syst√®mes core: Partielle")
        
        # Test cleanup
        app.cleanup()
        print("‚úÖ Nettoyage: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Initialisation: {e}")
        return False

def test_assistant_core():
    """Test de l'assistant core"""
    print("\nüß™ Test Assistant Core...")
    
    try:
        from core.assistant_core_production import AssistantCore
        assistant = AssistantCore()
        print("‚úÖ Cr√©ation AssistantCore: OK")
        
        # Test de traitement simple
        result = assistant.process_voice_command("Hello test")
        if result['success']:
            print("‚úÖ Traitement commande: OK")
            print(f"üìù R√©ponse: {result['response'][:50]}...")
        else:
            print(f"‚ö†Ô∏è Traitement commande: {result.get('error', 'Erreur inconnue')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test AssistantCore: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Tests de validation Jarvis AI Assistant")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 3
    
    # Test 1: Imports
    if test_imports():
        tests_passed += 1
    
    # Test 2: Initialisation
    if test_jarvis_initialization():
        tests_passed += 1
    
    # Test 3: Assistant Core
    if test_assistant_core():
        tests_passed += 1
    
    # R√©sultats
    print("\n" + "=" * 50)
    print(f"üìä R√âSULTATS: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        print("üéâ TOUS LES TESTS PASS√âS - Jarvis est fonctionnel!")
        return True
    elif tests_passed > 0:
        print("‚ö†Ô∏è TESTS PARTIELS - Jarvis fonctionne avec limitations")
        return True
    else:
        print("‚ùå √âCHEC - Jarvis ne fonctionne pas")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå Erreur fatale de test: {e}")
        sys.exit(1) 